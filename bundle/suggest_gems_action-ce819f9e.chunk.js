var t=Object.defineProperty,e=(e,s,i)=>(((e,s,i)=>{s in e?t(e,s,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[s]=i})(e,"symbol"!=typeof s?s+"":s,i),i);import{bn as s,_ as i,T as o,F as r,a0 as a,U as l}from"./detailed_results-35d49944.chunk.js";const h=class{constructor(t){for(var s of(e(this,"player"),e(this,"sim"),e(this,"gemPriorityByColor"),e(this,"epWeights"),e(this,"useJcGems"),e(this,"isBlacksmithing"),e(this,"numSocketedJcGems"),e(this,"jcUpgradePriority"),this.player=t.player,this.sim=t.sim,this.gemPriorityByColor={},h.allGemColors))this.gemPriorityByColor[s]=new Array;this.jcUpgradePriority=new Array,t.addAction("Suggest Gems","suggest-gems-action",(async()=>{this.optimizeGems()}))}async optimizeGems(){let t=this.player.getGear().withoutGems();this.numSocketedJcGems=0,this.epWeights=this.player.getEpWeights(),this.useJcGems=this.player.hasProfession(i.Jewelcrafting),this.isBlacksmithing=this.player.isBlacksmithing();const e=await this.updateGear(t);for(var s of(this.updateGemPriority(t,e),t=t.withMetaGem(this.sim.db.lookupGem(this.metaGemID)),t=this.activateMetaGem(t),await this.updateGear(t),h.allGemColors))this.gemPriorityByColor[s].length>0&&(t=await this.fillGemsByColor(t,s));this.useJcGems&&(t=await this.substituteJcGems(t))}async updateGear(t){return this.player.setGear(o.nextEventID(),t),await this.sim.updateCharacterStats(o.nextEventID()),r.fromProto(this.player.getCurrentStats().finalStats)}findStrongestSocketBonus(t,e,s,i){let o=null,a=1e-8;for(var l of t.getItemSlots()){const h=t.getEquippedItem(l);if(!h)continue;if(0!=h.numSocketsOfColor(i))continue;const m=h.numSocketsOfColor(e);if(0==m||s&&1!=m)continue;const n=new r(h.item.socketBonus).computeEP(this.epWeights)/m;n>a&&(o=l,a=n)}return o}socketGemInFirstMatchingSocket(t,e,s,i){if(null!=e){const o=t.getEquippedItem(e);if(!o)return t;for(const[r,a]of o.allSocketColors().entries())if(a==s)return t.withEquippedItem(e,o.withGem(this.sim.db.lookupGem(i),r),!0)}return t}async fillGemsByColor(t,e){const s=this.findSocketsByColor(t,e);return await this.fillGemsToCaps(t,s,this.gemPriorityByColor[e],0,0)}findSocketsByColor(t,e){const s=new Array;for(var i of t.getItemSlots()){const o=t.getEquippedItem(i);if(o)for(const[t,r]of o.curSocketColors(this.isBlacksmithing).entries())o.hasSocketedGem(t)||this.allowGemInSocket(e,r,i,o)&&s.push({itemSlot:i,socketIdx:t})}return s}async substituteJcGems(t){let e=t,s=0;for(;this.numSocketedJcGems<3&&s<this.jcUpgradePriority.length;){const t=this.jcUpgradePriority[s],i=this.sim.db.lookupGem(t.gemId);if(!e.getAllGems(this.isBlacksmithing).includes(i)){s+=1;continue}const o=this.sim.db.lookupGem(h.jcUpgradesById[t.gemId]),r=e.withSingleGemSubstitution(i,o,this.isBlacksmithing);(await this.updateGear(r)).belowCaps(t.statCaps)?(e=r,this.numSocketedJcGems+=1):(await this.updateGear(e),s+=1)}return e}async fillGemsToCaps(t,e,s,i,o){let r=t;const a=this.sim.db.lookupGem(s[i].gemId);if(0==i)for(var l of e.slice(o))r=r.withGem(l.itemSlot,l.socketIdx,a);let h=await this.updateGear(r);const m=s[i].statCaps;if(h.belowCaps(m)||i==s.length-1)return r;const n=this.sim.db.lookupGem(s[i+1].gemId),c=s[i+1].statCaps;let p=m.subtract(c);m.computeEP(p)<=0&&(p=m);for(var u=e.length-1;u>=o&&!h.belowCaps(p);u--)r=r.withGem(e[u].itemSlot,e[u].socketIdx,n),h=await this.updateGear(r);let d=u+1;return h.belowCaps(m)||(d=o),await this.fillGemsToCaps(r,e,s,i+1,d)}};let m=h;e(m,"allGemColors",[s.GemColorRed,s.GemColorYellow,s.GemColorBlue]),e(m,"jcUpgradesById",{40118:42154,40125:42156,40112:42143,40111:42142,40119:36767});class n extends m{constructor(t,s,i,o,r){super(t),e(this,"metaGemID",41398),e(this,"arpSlop",11),e(this,"expSlop",4),e(this,"hitSlop",4),e(this,"useArpGems"),e(this,"useExpGems"),e(this,"useAgiGems"),e(this,"useStrGems"),e(this,"arpTarget"),e(this,"passiveArp"),e(this,"arpStackDetected"),e(this,"tearSlot"),this.useArpGems=s,this.useExpGems=i,this.useAgiGems=o,this.useStrGems=r}updateGemPriority(t,e){this.arpTarget=this.calcArpTarget(t);const i=(new r).withStat(a.StatArmorPenetration,this.arpTarget+this.arpSlop),o=this.calcCritCap(t),l=(new r).withStat(a.StatExpertise,this.calcExpTarget()+this.expSlop),h=(new r).withStat(a.StatMeleeHit,262.32+this.hitSlop);this.tearSlot=null,this.passiveArp=e.getStat(a.StatArmorPenetration),this.arpStackDetected=this.detectArpStackConfiguration(t);const m=new Array;this.useArpGems&&m.push({gemId:40117,statCaps:i}),this.useExpGems&&m.push({gemId:40118,statCaps:l}),this.useAgiGems&&m.push({gemId:40112,statCaps:o}),this.useStrGems&&m.push({gemId:40111,statCaps:new r}),this.gemPriorityByColor[s.GemColorRed]=m;const n=new Array;this.useExpGems&&n.push({gemId:40162,statCaps:h.add(l)}),n.push({gemId:40125,statCaps:h}),this.arpStackDetected&&n.push({gemId:40117,statCaps:i}),this.useExpGems&&n.push({gemId:40162,statCaps:h.add(l)}),this.useAgiGems&&n.push({gemId:40148,statCaps:h.add(o)}),this.useStrGems&&n.push({gemId:40143,statCaps:h}),this.useAgiGems&&n.push({gemId:40147,statCaps:o}),this.useStrGems&&n.push({gemId:40142,statCaps:o}),this.useStrGems&&n.push({gemId:40146,statCaps:new r}),this.gemPriorityByColor[s.GemColorYellow]=n,this.jcUpgradePriority=new Array,this.useExpGems&&this.jcUpgradePriority.push({gemId:40118,statCaps:l}),this.jcUpgradePriority.push({gemId:40125,statCaps:h}),this.useAgiGems&&this.jcUpgradePriority.push({gemId:40112,statCaps:o}),this.useStrGems&&this.jcUpgradePriority.push({gemId:40111,statCaps:new r})}detectArpStackConfiguration(t){if(!this.useArpGems)return!1;const e=this.findSocketsByColor(t,s.GemColorRed).length-2;let i=this.passiveArp+20*e;return this.useJcGems&&(i+=42),this.arpTarget>1e3&&i>648&&i+20<this.arpTarget+this.arpSlop}activateMetaGem(t){let e=s.GemColorBlue;return this.tearSlot=this.findBlueTearSlot(t),null==this.tearSlot&&(e=s.GemColorYellow,this.tearSlot=this.findYellowTearSlot(t)),this.socketTear(t,e)}socketTear(t,e){return this.socketGemInFirstMatchingSocket(t,this.tearSlot,e,49110)}findBlueTearSlot(t){const e=this.arpStackDetected?s.GemColorYellow:null;return this.findStrongestSocketBonus(t,s.GemColorBlue,!0,e)}findYellowTearSlot(t){return this.findStrongestSocketBonus(t,s.GemColorYellow,!1,s.GemColorBlue)}allowGemInSocket(t,e,i,o){const a=o.numSocketsOfColor(s.GemColorBlue)>0&&i!=this.tearSlot;let l=!1;return e!=s.GemColorYellow||a||(l=new r(o.item.socketBonus).computeEP(this.epWeights)>1e-8),t==s.GemColorYellow&&l||t==s.GemColorRed&&!l}findSocketsByColor(t,e){const i=super.findSocketsByColor(t,e);return this.arpStackDetected&&e==s.GemColorYellow&&this.sortYellowSockets(t,i),i}sortYellowSockets(t,e){e.sort(((e,i)=>{const o=e.itemSlot,a=i.itemSlot;if(o==a)return 0;if(o==this.tearSlot)return-1;if(a==this.tearSlot)return 1;const l=t.getEquippedItem(o),h=new r(l.item.socketBonus).computeEP(this.epWeights),m=t.getEquippedItem(a);return new r(m.item.socketBonus).computeEP(this.epWeights)/m.numSocketsOfColor(s.GemColorYellow)-h/l.numSocketsOfColor(s.GemColorYellow)}))}calcArpTarget(t){let e=1399;t.hasTrinket(45931)?e-=751:t.hasTrinket(50198)?e-=678:t.hasTrinket(40256)&&(e-=612);const s=t.getEquippedItem(l.ItemSlotMainHand);return 3225==s?.enchant?.effectId&&(e-=120),e}calcExpTarget(){return 213.135}calcCritCap(t){return new r}async fillGemsByColor(t,e){let i=t;return e==s.GemColorRed&&this.useArpGems&&this.useJcGems&&(i=this.optimizeJcArpGems(i)),await super.fillGemsByColor(i,e)}calcDistanceToArpTarget(t,e){const s=Math.max(0,Math.min(e-3,Math.floor((this.arpTarget+this.arpSlop-this.passiveArp-34*t)/20))),i=this.passiveArp+34*t+20*s;return Math.abs(i-this.arpTarget)}optimizeJcArpGems(t){const e=this.findSocketsByColor(t,s.GemColorRed),i=e.length;let o=[0,1,2,3].reduce(((t,e)=>this.calcDistanceToArpTarget(t,i)<this.calcDistanceToArpTarget(e,i)?t:e));o=Math.min(o,i);let r=t;for(let s=0;s<o;s++)r=r.withGem(e[s].itemSlot,e[s].socketIdx,this.sim.db.lookupGem(42153));return this.numSocketedJcGems=o,r}}class c extends m{constructor(){super(...arguments),e(this,"metaGemID",41380)}updateGemPriority(t,e){const i=new Array;i.push({gemId:40119,statCaps:new r}),this.gemPriorityByColor[s.GemColorBlue]=i,this.jcUpgradePriority=i}activateMetaGem(t){return this.socketGemInFirstMatchingSocket(t,this.findStrongestSocketBonus(t,s.GemColorRed,!0,s.GemColorYellow),s.GemColorRed,40130)}allowGemInSocket(t,e,i,o){return t==s.GemColorBlue}}export{n as P,c as T};
//# sourceMappingURL=suggest_gems_action-ce819f9e.chunk.js.map
